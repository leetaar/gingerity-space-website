<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raspberry Pi Dashboard + Camera</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .camera-section {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .camera-feed {
            position: relative;
            background: black;
            border-radius: 10px;
            overflow: hidden;
            aspect-ratio: 4/3;
        }
        
        .camera-feed img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .camera-controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .btn {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            border: none;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .btn-danger {
            background: linear-gradient(45deg, #f44336, #d32f2f);
        }
        
        .photos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .photo-thumb {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            aspect-ratio: 1;
            cursor: pointer;
        }
        
        .photo-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .photo-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 5px;
            font-size: 10px;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
        }
        
        .progress-bar {
            width: 100%;
            height: 10px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
            overflow: hidden;
            margin: 5px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #FFC107, #F44336);
            transition: width 0.3s ease;
        }
        
        .status {
            text-align: center;
            font-size: 0.9em;
            opacity: 0.8;
            margin-top: 20px;
        }
        
        .camera-status {
            display: inline-block;
            margin-left: 10px;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
        }
        
        .camera-online {
            background: #4CAF50;
        }
        
        .camera-offline {
            background: #f44336;
        }
        
        @media (max-width: 768px) {
            .camera-section {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü•ßüìπ Raspberry Pi Dashboard + Camera</h1>
            <p>Monitoring systemu i live stream w czasie rzeczywistym</p>
        </div>
        
        <!-- Sekcja kamery -->
        <div class="camera-section">
            <div class="card">
                <h3>üìπ Live Stream 
                    <span id="camera-status" class="camera-status camera-offline">Offline</span>
                </h3>
                <div class="camera-feed">
                    <img id="camera-stream" src="/static/placeholder.jpg" alt="Camera stream" style="display: none;">
                    <div id="camera-placeholder" style="display: flex; align-items: center; justify-content: center; height: 100%; color: #666;">
                        Kliknij "Start Stream" aby rozpoczƒÖƒá
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h3>üéÆ Sterowanie</h3>
                <div class="camera-controls">
                    <button class="btn" onclick="startStream()">‚ñ∂Ô∏è Start Stream</button>
                    <button class="btn btn-danger" onclick="stopStream()">‚èπÔ∏è Stop Stream</button>
                    <button class="btn" onclick="takePhoto()">üì∏ Zr√≥b zdjƒôcie</button>
                    <button class="btn" onclick="refreshPhotos()">üîÑ Od≈õwie≈º zdjƒôcia</button>
                </div>
                
                <div style="margin-top: 20px;">
                    <h4>üìä Ostatnie zdjƒôcia</h4>
                    <div class="photos-grid" id="photos-grid">
                        <!-- Zdjƒôcia bƒôdƒÖ tutaj -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- IstniejƒÖce metryki systemu -->
        <div class="grid">
            <div class="card">
                <h3>üíª Procesor</h3>
                <div class="metric">
                    <span>U≈ºycie CPU:</span>
                    <span id="cpu-percent">--%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="cpu-bar"></div>
                </div>
                <div class="metric">
                    <span>Temperatura:</span>
                    <span id="cpu-temp">--¬∞C</span>
                </div>
            </div>
            
            <div class="card">
                <h3>üß† Pamiƒôƒá RAM</h3>
                <div class="metric">
                    <span>U≈ºyte:</span>
                    <span id="memory-used">-- GB</span>
                </div>
                <div class="metric">
                    <span>Ca≈Çkowita:</span>
                    <span id="memory-total">-- GB</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="memory-bar"></div>
                </div>
                <div class="metric">
                    <span>U≈ºycie:</span>
                    <span id="memory-percent">--%</span>
                </div>
            </div>
            
            <div class="card">
                <h3>üíæ Dysk</h3>
                <div class="metric">
                    <span>U≈ºyte:</span>
                    <span id="disk-used">-- GB</span>
                </div>
                <div class="metric">
                    <span>Ca≈Çkowita:</span>
                    <span id="disk-total">-- GB</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="disk-bar"></div>
                </div>
                <div class="metric">
                    <span>U≈ºycie:</span>
                    <span id="disk-percent">--%</span>
                </div>
            </div>
            
            <div class="card">
                <h3>‚è±Ô∏è System</h3>
                <div class="metric">
                    <span>Czas dzia≈Çania:</span>
                    <span id="uptime">--</span>
                </div>
                <div class="metric">
                    <span>Ostatnia aktualizacja:</span>
                    <span id="timestamp">--</span>
                </div>
                <div class="metric">
                    <span>Status kamery:</span>
                    <span id="camera-system-status">--</span>
                </div>
            </div>
        </div>
        
        <div class="status">
            Status po≈ÇƒÖczenia: <span id="connection-status">üü¢ Po≈ÇƒÖczony</span>
        </div>
    </div>

    <script>
        let streamActive = false;
        
        function updateDashboard() {
            fetch('/api/system')
                .then(response => response.json())
                .then(data => {
                    // CPU
                    document.getElementById('cpu-percent').textContent = data.cpu_percent + '%';
                    document.getElementById('cpu-bar').style.width = data.cpu_percent + '%';
                    document.getElementById('cpu-temp').textContent = data.temperature + '¬∞C';
                    
                    // Pamiƒôƒá
                    document.getElementById('memory-used').textContent = data.memory.used + ' GB';
                    document.getElementById('memory-total').textContent = data.memory.total + ' GB';
                    document.getElementById('memory-percent').textContent = data.memory.percent + '%';
                    document.getElementById('memory-bar').style.width = data.memory.percent + '%';
                    
                    // Dysk
                    document.getElementById('disk-used').textContent = data.disk.used + ' GB';
                    document.getElementById('disk-total').textContent = data.disk.total + ' GB';
                    document.getElementById('disk-percent').textContent = data.disk.percent + '%';
                    document.getElementById('disk-bar').style.width = data.disk.percent + '%';
                    
                    // System
                    document.getElementById('uptime').textContent = data.uptime;
                    document.getElementById('timestamp').textContent = data.timestamp;
                    document.getElementById('camera-system-status').textContent = data.camera_status ? 'üü¢ Aktywna' : 'üî¥ Nieaktywna';
                    
                    document.getElementById('connection-status').innerHTML = 'üü¢ Po≈ÇƒÖczony';
                })
                .catch(error => {
                    console.error('B≈ÇƒÖd:', error);
                    document.getElementById('connection-status').innerHTML = 'üî¥ B≈ÇƒÖd po≈ÇƒÖczenia';
                });
        }
        
        function startStream() {
            const img = document.getElementById('camera-stream');
            const placeholder = document.getElementById('camera-placeholder');
            const status = document.getElementById('camera-status');
            
            img.src = '/camera/stream?' + Date.now();
            img.style.display = 'block';
            placeholder.style.display = 'none';
            status.textContent = 'Online';
            status.className = 'camera-status camera-online';
            streamActive = true;
        }
        
        function stopStream() {
            const img = document.getElementById('camera-stream');
            const placeholder = document.getElementById('camera-placeholder');
            const status = document.getElementById('camera-status');
            
            fetch('/camera/stop_stream');
            img.style.display = 'none';
            placeholder.style.display = 'flex';
            status.textContent = 'Offline';
            status.className = 'camera-status camera-offline';
            streamActive = false;
        }
        
        function takePhoto() {
            fetch('/camera/photo', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Zdjƒôcie zapisane: ' + data.filename);
                        refreshPhotos();
                    } else {
                        alert('B≈ÇƒÖd: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('B≈ÇƒÖd po≈ÇƒÖczenia: ' + error);
                });
        }
        
        function refreshPhotos() {
            fetch('/camera/photos')
                .then(response => response.json())
                .then(photos => {
                    const grid = document.getElementById('photos-grid');
                    grid.innerHTML = '';
                    
                    photos.forEach(photo => {
                        const div = document.createElement('div');
                        div.className = 'photo-thumb';
                        div.innerHTML = `
                            <img src="${photo.path}" alt="${photo.filename}" onclick="window.open('${photo.path}', '_blank')">
                            <div class="photo-info">
                                ${photo.size} KB<br>
                                ${photo.date.split(' ')[1]}
                            </div>
                        `;
                        grid.appendChild(div);
                    });
                })
                .catch(error => {
                    console.error('B≈ÇƒÖd pobierania zdjƒôƒá:', error);
                });
        }
        
        // Inicjalizacja
        updateDashboard();
        refreshPhotos();
        setInterval(updateDashboard, 5000);
        setInterval(refreshPhotos, 30000); // Od≈õwie≈º zdjƒôcia co 30s
    </script>
</body>
</html>
